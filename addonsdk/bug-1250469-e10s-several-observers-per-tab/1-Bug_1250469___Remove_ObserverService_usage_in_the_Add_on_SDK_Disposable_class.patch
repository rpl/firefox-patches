# HG changeset patch
# User Luca Greco <lgreco@mozilla.com>
# Date 1457555975 -3600
#      Wed Mar 09 21:39:35 2016 +0100
# Node ID 9c6149b99e81e61fad34bf5f77a64f25b01483db
# Parent  b3006e4e09af81825badbad69fa3e8c546c7507c
Bug 1250469 - Remove ObserverService usage in the Add-on SDK Disposable class

MozReview-Commit-ID: 32X9M07FbHO

diff --git a/addon-sdk/source/lib/sdk/core/disposable.js b/addon-sdk/source/lib/sdk/core/disposable.js
--- a/addon-sdk/source/lib/sdk/core/disposable.js
+++ b/addon-sdk/source/lib/sdk/core/disposable.js
@@ -3,31 +3,27 @@
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 module.metadata = {
   "stability": "experimental"
 };
 
-
 const { Class } = require("./heritage");
-const { Observer, subscribe, unsubscribe, observe } = require("./observer");
-const { isWeak, WeakReference } = require("./reference");
 const method = require("../../method/core");
 
 const unloadSubject = require('@loader/unload');
 const addonUnloadTopic = "sdk:loader:destroy";
 
-
+const { on } = require('../system/events');
 
 const uninstall = method("disposable/uninstall");
 exports.uninstall = uninstall;
 
-
 const shutdown = method("disposable/shutdown");
 exports.shutdown = shutdown;
 
 const disable = method("disposable/disable");
 exports.disable = disable;
 
 const upgrade = method("disposable/upgrade");
 exports.upgrade = upgrade;
@@ -37,38 +33,75 @@ exports.downgrade = downgrade;
 
 const unload = method("disposable/unload");
 exports.unload = unload;
 
 const dispose = method("disposable/dispose");
 exports.dispose = dispose;
 dispose.define(Object, object => object.dispose());
 
-
 const setup = method("disposable/setup");
 exports.setup = setup;
 setup.define(Object, (object, ...args) => object.setup(...args));
 
+const { isWeak } = require("./reference");
+const WeakSet = require("../lang/weak-set");
+const disposables = new Set();
+
+on(addonUnloadTopic, ({ subject, data }) => {
+  if (subject.wrappedJSObject !== unloadSubject) {
+    return;
+  }
+
+  function tryDisposableUnload(disposable) {
+    try {
+      if (disposable) {
+        unload(disposable, data);
+      }
+    } catch(e) {
+      console.error("Error unloading a disposable", e);
+    }
+  }
+
+  for (let disposable of disposables) {
+    tryDisposableUnload(disposable);
+  }
+
+  disposables.clear();
+
+  for (let disposable of WeakSet.iterator(disposables)) {
+    tryDisposableUnload(disposable);
+  }
+
+  WeakSet.clear(disposables);
+});
 
 // Set's up disposable instance.
 const setupDisposable = disposable => {
-  subscribe(disposable, addonUnloadTopic, isWeak(disposable));
+  if (isWeak(disposable)) {
+    WeakSet.add(disposables, disposable);
+  } else {
+    disposables.add(disposable);
+  }
 };
 exports.setupDisposable = setupDisposable;
 
 // Tears down disposable instance.
 const disposeDisposable = disposable => {
-  unsubscribe(disposable, addonUnloadTopic);
+  if (isWeak(disposable)) {
+    WeakSet.remove(disposables, disposable);
+  } else {
+    disposables.delete(disposable);
+  }
 };
 exports.disposeDisposable = disposeDisposable;
 
 // Base type that takes care of disposing it's instances on add-on unload.
 // Also makes sure to remove unload listener if it's already being disposed.
 const Disposable = Class({
-  implements: [Observer],
   initialize: function(...args) {
     // First setup instance before initializing it's disposal. If instance
     // fails to initialize then there is no instance to be disposed at the
     // unload.
     setup(this, ...args);
     setupDisposable(this);
   },
   destroy: function(reason) {
@@ -81,53 +114,40 @@ const Disposable = Class({
     // Implement your initialize logic here.
   },
   dispose: function() {
     // Implement your cleanup logic here.
   }
 });
 exports.Disposable = Disposable;
 
-// Disposable instances observe add-on unload notifications in
-// order to trigger `unload` on them.
-observe.define(Disposable, (disposable, subject, topic, data) => {
-  const isUnloadTopic = topic === addonUnloadTopic;
-  const isUnloadSubject = subject.wrappedJSObject === unloadSubject;
-  if (isUnloadTopic && isUnloadSubject) {
-    unsubscribe(disposable, topic);
-    unload(disposable);
-  }
-});
-
 const unloaders = {
   destroy: dispose,
   uninstall: uninstall,
   shutdown: shutdown,
   disable: disable,
   upgrade: upgrade,
   downgrade: downgrade
-}
+};
+
 const unloaded = new WeakMap();
 unload.define(Disposable, (disposable, reason) => {
   if (!unloaded.get(disposable)) {
     unloaded.set(disposable, true);
     // Pick an unload handler associated with an unload
     // reason (falling back to destroy if not found) and
     // delegate unloading to it.
     const unload = unloaders[reason] || unloaders.destroy;
-    unload(disposable);
+    unload(disposable, reason);
   }
 });
 
-
-// If add-on is disabled munally, it's being upgraded, downgraded
-// or uniststalled `dispose` is invoked to undo any changes that
+// If add-on is disabled manually, it's being upgraded, downgraded
+// or uninstalled `dispose` is invoked to undo any changes that
 // has being done by it in this session.
 disable.define(Disposable, dispose);
 downgrade.define(Disposable, dispose);
 upgrade.define(Disposable, dispose);
 uninstall.define(Disposable, dispose);
 
-// If application is shut down no dispose is invoked as undo-ing
-// changes made by instance is likely to just waste of resources &
-// increase shutdown time. Although specefic components may choose
-// to implement shutdown handler that does something better.
-shutdown.define(Disposable, disposable => {});
+// If the shutdown `dispose` is not defined some of the test cases
+// will fail if the loader is unloading with 'shutdown' reason.
+shutdown.define(Disposable, dispose);
diff --git a/addon-sdk/source/test/test-disposable.js b/addon-sdk/source/test/test-disposable.js
--- a/addon-sdk/source/test/test-disposable.js
+++ b/addon-sdk/source/test/test-disposable.js
@@ -4,25 +4,53 @@
 "use strict";
 
 const { Loader } = require("sdk/test/loader");
 const { Class } = require("sdk/core/heritage");
 const { Disposable } = require("sdk/core/disposable");
 const { Cc, Ci, Cu } = require("chrome");
 const { setTimeout } = require("sdk/timers");
 
+exports["test disposeDisposable"] = assert => {
+  let loader = Loader(module);
+
+  const { Disposable, disposeDisposable } = loader.require("sdk/core/disposable");
+  const { isWeak, WeakReference } = loader.require("sdk/core/reference");
+
+  let disposals = 0;
+
+  const Foo = Class({
+    extends: Disposable,
+    implements: [WeakReference],
+    dispose(...params) {
+      disposeDisposable(this);
+      disposals = disposals + 1;
+    }
+  });
+
+  const f1 = new Foo();
+  assert.equal(isWeak(f1), true, "f1 has WeakReference support");
+
+  f1.dispose();
+  assert.equal(disposals, 1, "disposed on dispose");
+
+  loader.unload("uninstall");
+  assert.equal(disposals, 1, "after disposeDisposable, dispose is not called anymore");
+};
+
 exports["test destroy reasons"] = assert => {
+  let disposals = 0;
+
   const Foo = Class({
     extends: Disposable,
     dispose: function() {
       disposals = disposals + 1;
     }
   });
 
-  let disposals = 0;
   const f1 = new Foo();
 
   f1.destroy();
   assert.equal(disposals, 1, "disposed on destroy");
   f1.destroy();
   assert.equal(disposals, 1, "second destroy is ignored");
 
   disposals = 0;
@@ -33,19 +61,20 @@ exports["test destroy reasons"] = assert
   f2.destroy("uninstall")
   f2.destroy();
   assert.equal(disposals, 1, "disposal happens just once");
 
   disposals = 0;
   const f3 = new Foo();
 
   f3.destroy("shutdown");
-  assert.equal(disposals, 0, "shutdown doesn't invoke disposal");
+  assert.equal(disposals, 1, "shutdown invoke disposal");
+  f3.destroy("shutdown");
   f3.destroy();
-  assert.equal(disposals, 0, "shutdown already skipped disposal");
+  assert.equal(disposals, 1, "shutdown disposal happens just once");
 
   disposals = 0;
   const f4 = new Foo();
 
   f4.destroy("disable");
   assert.equal(disposals, 1, "disable invokes disposal");
   f4.destroy("disable")
   f4.destroy();
@@ -144,17 +173,17 @@ exports["test different unload hooks"] =
 
   const u7 = new UberUnload();
   u7.destroy("whatever");
   u7.destroy();
   u7.destroy("uninstall");
   assert.deepEqual(u7.log, ["dispose"], "dispose hook invoked");
 };
 
-exports["test disposables are desposed on unload"] = function(assert) {
+exports["test disposables are disposed on unload"] = function(assert) {
   let loader = Loader(module);
   let { Disposable } = loader.require("sdk/core/disposable");
 
   let arg1 = {}
   let arg2 = 2
   let disposals = 0
 
   let Foo = Class({
