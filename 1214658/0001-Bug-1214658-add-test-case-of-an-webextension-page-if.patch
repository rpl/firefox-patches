# HG changeset patch
# User Luca Greco <luca.greco@alcacoop.it>

Bug 1214658 - add test case of an webextension page iframe created from a content script r=kmag

---
 .../extensions/test/mochitest/mochitest.ini        |   1 +
 .../test_ext_contentscript_create_iframe.html      | 102 +++++++++++++++++++++
 2 files changed, 103 insertions(+)
 create mode 100644 toolkit/components/extensions/test/mochitest/test_ext_contentscript_create_iframe.html

diff --git a/toolkit/components/extensions/test/mochitest/mochitest.ini b/toolkit/components/extensions/test/mochitest/mochitest.ini
index e535b5d..3f77302 100644
--- a/toolkit/components/extensions/test/mochitest/mochitest.ini
+++ b/toolkit/components/extensions/test/mochitest/mochitest.ini
@@ -16,16 +16,17 @@ support-files =
   file_script_xhr.js
   file_sample.html
   file_privilege_escalation.html
   file_ext_background_api_injection.js
 
 [test_ext_simple.html]
 [test_ext_geturl.html]
 [test_ext_contentscript.html]
+[test_ext_contentscript_create_iframe.html]
 [test_ext_webrequest.html]
 [test_ext_generate.html]
 [test_ext_localStorage.html]
 [test_ext_notifications.html]
 [test_ext_runtime_connect.html]
 [test_ext_runtime_disconnect.html]
 [test_ext_runtime_getPlatformInfo.html]
 [test_ext_sandbox_var.html]
diff --git a/toolkit/components/extensions/test/mochitest/test_ext_contentscript_create_iframe.html b/toolkit/components/extensions/test/mochitest/test_ext_contentscript_create_iframe.html
new file mode 100644
index 0000000..f8d040e
--- /dev/null
+++ b/toolkit/components/extensions/test/mochitest/test_ext_contentscript_create_iframe.html
@@ -0,0 +1,102 @@
+<!DOCTYPE HTML>
+<html>
+<head>
+  <title>Test for content script</title>
+  <script type="text/javascript" src="/tests/SimpleTest/SimpleTest.js"></script>
+  <script type="text/javascript" src="/tests/SimpleTest/SpawnTask.js"></script>
+  <script type="text/javascript" src="/tests/SimpleTest/ExtensionTestUtils.js"></script>
+  <script type="text/javascript" src="head.js"></script>
+  <link rel="stylesheet" type="text/css" href="/tests/SimpleTest/test.css"/>
+</head>
+<body>
+
+<!-- WORKAROUND: this iframe hack is used to contain the html page source without escaping it -->
+<textarea id="test-asset">
+  <!DOCTYPE HTML>
+  <html>
+    <head>
+      <meta charset="utf-8">
+      <script>
+       browser.runtime.sendMessage({
+         name: "content-script-iframe-loaded",
+         availableAPIs: Object.keys(browser)
+       });
+      </script>
+    </head>
+  </html>
+</textarea>
+
+<script type="application/javascript;version=1.8">
+"use strict";
+
+add_task(function* test_contentscript_create_iframe()
+{
+  function backgroundScript() {
+    browser.runtime.onMessage.addListener((msg, sender) => {
+      var { name, availableAPIs } = msg;
+      var hasExtTabsAPI = availableAPIs.indexOf("tabs") > 0;
+      var hasExtWindowsAPI = availableAPIs.indexOf("windows") > 0;
+
+      browser.test.assertFalse(hasExtTabsAPI, "the created iframe should not be able to use privileged APIs (tabs)");
+      browser.test.assertFalse(hasExtWindowsAPI, "the created iframe should not be able to use privileged APIs (windows)");
+
+      browser.test.sendMessage(name);
+    });
+  }
+
+  function contentScript() {
+    var iframe = document.createElement("iframe");
+    iframe.setAttribute("src", browser.runtime.getURL("content_script_iframe.html"));
+    document.body.appendChild(iframe);
+  }
+
+  function contentScriptIframe() {
+    browser.runtime.sendMessage('content-script-iframe-loaded');
+  }
+
+  let extensionData = {
+    manifest: {
+      content_scripts: [
+        {
+          "matches": ["http://mochi.test/*/file_sample.html"],
+          "js": ["content_script.js"],
+          "run_at": "document_end"
+        }
+      ],
+      "web_accessible_resources": [
+        "content_script_iframe.html"
+      ]
+    },
+
+    background: "(" + backgroundScript + ")()",
+
+    files: {
+      "content_script.js": "(" + contentScript + ")()",
+      "content_script_iframe.html": document.querySelector("#test-asset").textContent
+    },
+  };
+
+  let extension = ExtensionTestUtils.loadExtension(extensionData);
+
+  let contentScriptIframeCreatedPromise = new Promise(resolve => {
+    extension.onMessage("content-script-iframe-loaded", () => { resolve(); });
+  });
+
+  yield extension.startup();
+  info("extension loaded");
+
+  let win = window.open("file_sample.html");
+
+  yield Promise.all([waitForLoad(win), contentScriptIframeCreatedPromise]);
+
+  info("content script privileged iframe loaded and executed");
+
+  win.close();
+
+  yield extension.unload();
+  info("extension unloaded");
+});
+</script>
+
+</body>
+</html>

