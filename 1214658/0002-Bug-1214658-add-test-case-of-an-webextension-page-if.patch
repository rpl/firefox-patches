# HG changeset patch
# User Luca Greco <lgreco@mozilla.com>

Bug 1214658 - add test case of an webextension page iframe created from a content script r=kmag

---
 .../extensions/test/mochitest/mochitest.ini        |   1 +
 .../test_ext_contentscript_create_iframe.html      | 157 +++++++++++++++++++++
 2 files changed, 158 insertions(+)
 create mode 100644 toolkit/components/extensions/test/mochitest/test_ext_contentscript_create_iframe.html

diff --git a/toolkit/components/extensions/test/mochitest/mochitest.ini b/toolkit/components/extensions/test/mochitest/mochitest.ini
index f1364ed..1f3b168 100644
--- a/toolkit/components/extensions/test/mochitest/mochitest.ini
+++ b/toolkit/components/extensions/test/mochitest/mochitest.ini
@@ -22,16 +22,17 @@ support-files =
   file_privilege_escalation.html
   file_ext_background_api_injection.js
   file_permission_xhr.html
 
 [test_ext_simple.html]
 [test_ext_geturl.html]
 [test_ext_contentscript.html]
 skip-if = buildapp == 'b2g' # runat != document_idle is not supported.
+[test_ext_contentscript_create_iframe.html]
 [test_ext_i18n_css.html]
 [test_ext_generate.html]
 [test_ext_localStorage.html]
 [test_ext_onmessage_removelistener.html]
 [test_ext_notifications.html]
 [test_ext_permission_xhr.html]
 skip-if = buildapp == 'b2g' # JavaScript error: jar:remoteopenfile:///data/local/tmp/generated-extension.xpi!/content.js, line 46: NS_ERROR_ILLEGAL_VALUE:
 [test_ext_runtime_connect.html]
diff --git a/toolkit/components/extensions/test/mochitest/test_ext_contentscript_create_iframe.html b/toolkit/components/extensions/test/mochitest/test_ext_contentscript_create_iframe.html
new file mode 100644
index 0000000..7617f70
--- /dev/null
+++ b/toolkit/components/extensions/test/mochitest/test_ext_contentscript_create_iframe.html
@@ -0,0 +1,157 @@
+<!DOCTYPE HTML>
+<html>
+<head>
+  <title>Test for content script</title>
+  <script type="text/javascript" src="/tests/SimpleTest/SimpleTest.js"></script>
+  <script type="text/javascript" src="/tests/SimpleTest/SpawnTask.js"></script>
+  <script type="text/javascript" src="/tests/SimpleTest/ExtensionTestUtils.js"></script>
+  <script type="text/javascript" src="head.js"></script>
+  <link rel="stylesheet" type="text/css" href="/tests/SimpleTest/test.css"/>
+</head>
+<body>
+
+<!-- WORKAROUND: this textarea hack is used to contain the html page source without escaping it -->
+<textarea id="test-asset">
+  <!DOCTYPE HTML>
+  <html>
+    <head>
+      <meta charset="utf-8">
+      <script type="text/javascript" src="content_script_iframe.js"></script>
+    </head>
+  </html>
+</textarea>
+
+<script type="text/javascript">
+"use strict";
+
+add_task(function* test_contentscript_create_iframe() {
+  function backgroundScript() {
+    browser.runtime.onMessage.addListener((msg, sender) => {
+      let { name, availableAPIs, manifest, testGetManifest } = msg;
+      let hasExtTabsAPI = availableAPIs.indexOf("tabs") > 0;
+      let hasExtWindowsAPI = availableAPIs.indexOf("windows") > 0;
+
+      browser.test.assertFalse(hasExtTabsAPI, "the created iframe should not be able to use privileged APIs (tabs)");
+      browser.test.assertFalse(hasExtWindowsAPI, "the created iframe should not be able to use privileged APIs (windows)");
+      browser.test.assertTrue(
+        JSON.stringify(manifest) == JSON.stringify(chrome.runtime.getManifest()),
+        "the add-on manifest should be accessible from the created iframe"
+      );
+
+      browser.test.assertTrue(
+        testGetManifest && testGetManifest.content_scripts,
+        "GET_MANIFEST() returns manifest data before extension unload"
+      );
+
+      browser.test.sendMessage(name);
+    });
+  }
+
+  function contentScript() {
+    let iframe = document.createElement("iframe");
+    iframe.setAttribute("src", browser.runtime.getURL("content_script_iframe.html"));
+    document.body.appendChild(iframe);
+  }
+
+  function contentScriptIframe() {
+    window.GET_MANIFEST = browser.runtime.getManifest.bind(null);
+    let testGetManifest = window.GET_MANIFEST();
+
+    let manifest = browser.runtime.getManifest();
+    let availableAPIs = Object.keys(browser);
+
+    browser.runtime.sendMessage({
+      name: "content-script-iframe-loaded",
+      availableAPIs,
+      manifest,
+      testGetManifest,
+    });
+  }
+
+  let extensionData = {
+    manifest: {
+      content_scripts: [
+        {
+          "matches": ["http://mochi.test/*/file_sample.html"],
+          "js": ["content_script.js"],
+          "run_at": "document_end",
+        },
+      ],
+      web_accessible_resources: [
+        "content_script_iframe.html",
+      ],
+    },
+
+    background: "(" + backgroundScript + ")()",
+
+    files: {
+      "content_script.js": "new " + contentScript,
+      "content_script_iframe.html": document.querySelector("#test-asset").textContent,
+      "content_script_iframe.js": "new " + contentScriptIframe,
+    },
+  };
+
+  let extension = ExtensionTestUtils.loadExtension(extensionData);
+
+  let contentScriptIframeCreatedPromise = new Promise(resolve => {
+    extension.onMessage("content-script-iframe-loaded", () => { resolve(); });
+  });
+
+  yield extension.startup();
+  info("extension loaded");
+
+  let win = window.open("file_sample.html");
+
+  yield Promise.all([waitForLoad(win), contentScriptIframeCreatedPromise]);
+  info("content script privileged iframe loaded and executed");
+
+  info("testing APIs availability once the extension is unloaded...");
+
+  let iframeWindow = SpecialPowers.wrap(win)[0];
+
+  ok(iframeWindow, "content script enabled iframe found");
+  ok(/content_script_iframe\.html$/.test(iframeWindow.location), "the found iframe has the expected URL");
+
+  yield extension.unload();
+  info("extension unloaded");
+
+  let ww = SpecialPowers.Cu.waiveXrays(iframeWindow);
+  let isDeadWrapper = SpecialPowers.Cu.isDeadWrapper(ww.browser);
+  ok(!isDeadWrapper, "the API object should not be a dead object");
+
+  let manifest;
+  let manifestException;
+
+  try {
+    manifest = ww.browser.runtime.getManifest();
+  } catch (e) {
+    manifestException = e;
+  }
+
+  ok(!manifest, "manifest should be undefined");
+
+  const BROWSER_RUNTIME_UNDEFINED_EXCEPTION = "TypeError: ww.browser.runtime is undefined";
+  is(manifestException && manifestException.toString(), BROWSER_RUNTIME_UNDEFINED_EXCEPTION,
+     `expected BROWSER_RUNTIME_UNDEFINED_EXCEPTION exception received`);
+
+  let getManifest;
+  let getManifestException;
+
+  try {
+    getManifest = ww.eval("GET_MANIFEST()");
+  } catch (e) {
+    getManifestException = e;
+  }
+
+  ok(!getManifest, "getManifest should be undefined");
+
+  const DESTROYED_EXT_METHOD_EXCEPTION = "TypeError: GET_MANIFEST is not a function";
+  is(getManifestException && getManifestException.toString(), DESTROYED_EXT_METHOD_EXCEPTION,
+     `expected DESTROYED_EXT_METHOD_EXCEPTION exception received`);
+
+  win.close();
+});
+</script>
+
+</body>
+</html>

