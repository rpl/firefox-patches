# HG changeset patch
# User Rob Wu <rob@robwu.nl>
# Date 1457850150 -3600
#      Sun Mar 13 07:22:30 2016 +0100
# Node ID a5542905d542862520d1785908857499add4f0d6
# Parent  b3006e4e09af81825badbad69fa3e8c546c7507c
Bug 1226754 - Enable base64-encoding of long strings

MozReview-Commit-ID: 1RJi8okYbb7

diff --git a/addon-sdk/source/lib/sdk/base64.js b/addon-sdk/source/lib/sdk/base64.js
--- a/addon-sdk/source/lib/sdk/base64.js
+++ b/addon-sdk/source/lib/sdk/base64.js
@@ -22,22 +22,26 @@ function isUTF8(charset) {
     return false;
 
   if (type === "string" && charset.toLowerCase() === "utf-8")
     return true;
 
   throw new Error("The charset argument can be only 'utf-8'");
 }
 
+function toOctetChar(c) {
+  return String.fromCharCode(c.charCodeAt(0) & 0xFF);
+}
+
 exports.decode = function (data, charset) {
   if (isUTF8(charset))
     return decodeURIComponent(escape(atob(data)))
 
   return atob(data);
 }
 
 exports.encode = function (data, charset) {
   if (isUTF8(charset))
     return btoa(unescape(encodeURIComponent(data)))
 
-  data = String.fromCharCode(...Array.from(data, c => (c.charCodeAt(0) & 0xff)));
+  data = data.replace(/[^\x00-\xFF]/g, toOctetChar);
   return btoa(data);
 }
diff --git a/addon-sdk/source/test/test-base64.js b/addon-sdk/source/test/test-base64.js
--- a/addon-sdk/source/test/test-base64.js
+++ b/addon-sdk/source/test/test-base64.js
@@ -8,16 +8,20 @@ const base64 = require("sdk/base64");
 
 const text = "Awesome!";
 const b64text = "QXdlc29tZSE=";
 
 const utf8text = "\u2713 à la mode";
 const badutf8text = "\u0013 à la mode";
 const b64utf8text = "4pyTIMOgIGxhIG1vZGU=";
 
+// 1 MB string
+const longtext = 'fff'.repeat(333333);
+const b64longtext = 'ZmZm'.repeat(333333);
+
 exports["test base64.encode"] = function (assert) {
   assert.equal(base64.encode(text), b64text, "encode correctly")
 }
 
 exports["test base64.decode"] = function (assert) {
   assert.equal(base64.decode(b64text), text, "decode correctly")
 }
 
@@ -28,16 +32,36 @@ exports["test base64.encode Unicode"] = 
 }
 
 exports["test base64.decode Unicode"] = function (assert) {
 
   assert.equal(base64.decode(b64utf8text, "utf-8"), utf8text,
     "decode correctly Unicode strings.")
 }
 
+exports["test base64.encode long string"] = function (assert) {
+
+  assert.equal(base64.encode(longtext), b64longtext, "encode long strings")
+}
+
+exports["test base64.decode long string"] = function (assert) {
+
+  assert.equal(base64.decode(b64longtext), longtext, "decode long strings")
+}
+
+exports["test base64.encode treats input as octet string"] = function (assert) {
+
+  assert.equal(base64.encode("\u0066"), "Zg==",
+    "treat octet string as octet string")
+  assert.equal(base64.encode("\u0166"), "Zg==",
+    "treat non-octet string as octet string")
+  assert.equal(base64.encode("\uff66"), "Zg==",
+    "encode non-octet string as octet string")
+}
+
 exports["test base64.encode with wrong charset"] = function (assert) {
 
   assert.throws(function() {
     base64.encode(utf8text, "utf-16");
   }, "The charset argument can be only 'utf-8'");
 
   assert.throws(function() {
     base64.encode(utf8text, "");
