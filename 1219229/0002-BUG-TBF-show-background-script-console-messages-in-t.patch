# HG changeset patch
# User Luca Greco <luca.greco@alcacoop.it>

BUG TBF show background script console messages in the addon debugging toolbox

---
 toolkit/components/extensions/Extension.jsm | 15 +++++++++++++++
 1 file changed, 15 insertions(+)

diff --git a/toolkit/components/extensions/Extension.jsm b/toolkit/components/extensions/Extension.jsm
index 99305da..9e1e7ef 100644
--- a/toolkit/components/extensions/Extension.jsm
+++ b/toolkit/components/extensions/Extension.jsm
@@ -320,17 +320,32 @@ GlobalManager = {
     this.extensionMap.delete(extension.id);
   },
 
   injectInDocShell(docShell, extension, context) {
     this.docShells.set(docShell, {extension, context});
   },
 
   observe(contentWindow, topic, data) {
+    const { ConsoleAPI } = Cu.import("resource://gre/modules/Console.jsm", {});
+
     let inject = (extension, context) => {
+      let wid = contentWindow.QueryInterface(Ci.nsIInterfaceRequestor)
+            .getInterface(Ci.nsIDOMWindowUtils).currentInnerWindowID;
+
+      let consoleObj = new ConsoleAPI({
+        prefix: extension.name,
+        maxLogLevel: "info",
+        dump: dump,
+        innerID: wid,
+        consoleID: "addon/" + extension.id,
+      });
+
+      Cu.waiveXrays(contentWindow).console = Cu.cloneInto(consoleObj, contentWindow, { cloneFunctions: true });
+
       let chromeObj = Cu.createObjectIn(contentWindow, {defineAs: "browser"});
       contentWindow.wrappedJSObject.chrome = contentWindow.wrappedJSObject.browser;
       let api = Management.generateAPIs(extension, context, Management.apis);
       injectAPI(api, chromeObj);
 
       let schemaApi = Management.generateAPIs(extension, context, Management.schemaApis);
       let schemaWrapper = {
         callFunction(ns, name, args) {

