# HG changeset patch
# User Luca Greco <luca.greco@alcacoop.it>
# Date 1454624520 -3600
#      Thu Feb 04 23:22:00 2016 +0100
# Node ID d1d285b44277f249848e55fc97f50ef4acaae6ac
# Parent  22dcd8ed53e2d762c4baec9a993eb71b7c4f42d7
Bug 1190685 - [webext] Add webNavigation.getFrame/getAllFrames test cases. r=kmag

diff --git a/browser/components/extensions/test/browser/browser.ini b/browser/components/extensions/test/browser/browser.ini
--- a/browser/components/extensions/test/browser/browser.ini
+++ b/browser/components/extensions/test/browser/browser.ini
@@ -33,8 +33,9 @@ support-files =
 [browser_ext_tabs_update.js]
 [browser_ext_tabs_onUpdated.js]
 [browser_ext_tabs_sendMessage.js]
 [browser_ext_tabs_move.js]
 [browser_ext_tabs_move_window.js]
 [browser_ext_windows_update.js]
 [browser_ext_contentscript_connect.js]
 [browser_ext_tab_runtimeConnect.js]
+[browser_ext_webNavigation_getFrames.js]
\ No newline at end of file
diff --git a/browser/components/extensions/test/browser/browser_ext_webNavigation_getFrames.js b/browser/components/extensions/test/browser/browser_ext_webNavigation_getFrames.js
new file mode 100644
--- /dev/null
+++ b/browser/components/extensions/test/browser/browser_ext_webNavigation_getFrames.js
@@ -0,0 +1,149 @@
+/* -*- Mode: indent-tabs-mode: nil; js-indent-level: 2 -*- */
+/* vim: set sts=2 sw=2 et tw=80: */
+"use strict";
+
+add_task(function* testWebNavigationGetNonExistentFrames() {
+  let extension = ExtensionTestUtils.loadExtension({
+    background: "(" + function() {
+      let results = [];
+      results.push(new Promise((resolve) => {
+        // There is no "tabId = 0" because the id assigned by TabManager (defined in ext-utils.js)
+        // starts from 1.
+        browser.webNavigation.getAllFrames({ tabId: 0 }, (res) => {
+          browser.test.assertEq(null, res, "getAllFrames should pass a null value for non existent tab");
+          resolve();
+        });
+      }));
+      results.push(new Promise((resolve) => {
+        // There is no "tabId = 0" because the id assigned by TabManager (defined in ext-utils.js)
+        // starts from 1.
+        browser.webNavigation.getFrame({ tabId: 0, frameId: 15, processId: 20 }, (res) => {
+          browser.test.assertEq(null, res, "getFrame should pass a null value for non existent frame ");
+          resolve();
+        });
+      }));
+      Promise.all(results).then(() => {
+        browser.test.sendMessage("getNonExistentFrames.done");
+      });
+    } + ")();",
+    manifest: {
+      permissions: ["webNavigation"],
+    },
+  });
+  info("load complete");
+
+  yield extension.startup();
+  info("startup complete");
+
+  yield extension.awaitMessage("getNonExistentFrames.done");
+
+  yield extension.unload();
+  info("extension unloaded");
+});
+
+add_task(function* testWebNavigationFrames() {
+  let extension = ExtensionTestUtils.loadExtension({
+    background: "(" + function() {
+      let tabId;
+      let collectedDetails = [];
+
+      browser.webNavigation.onCompleted.addListener((details) => {
+        collectedDetails.push(details);
+
+        if (details.frameId !== 0) {
+          // wait for the top level iframe to be complete
+          return;
+        }
+
+        browser.webNavigation.getAllFrames({ tabId }, (getAllFramesDetails) => {
+          let getFramePromises = getAllFramesDetails.map((frameDetail) => {
+            let { frameId } = frameDetail;
+            return new Promise((resolve) => {
+              browser.webNavigation.getFrame({ tabId, frameId, processId: 0 }, resolve);
+            });
+          });
+
+          Promise.all(getFramePromises).then((getFrameResults) => {
+            browser.tabs.remove(tabId);
+
+            browser.test.sendMessage("webNavigationFrames.done", {
+              collectedDetails, getAllFramesDetails, getFrameResults,
+            });
+          });
+        });
+      });
+
+      browser.tabs.create({ url: "tab.html" }, (tab) => {
+        tabId = tab.id;
+      });
+    } + ")();",
+    manifest: {
+      permissions: ["webNavigation", "tabs"],
+    },
+    files: {
+      "tab.html": `
+        <!DOCTYPE html>
+        <html>
+          <head>
+            <meta charset="utf-8">
+          </head>
+          <body>
+            <iframe src="subframe.html"></iframe>
+            <iframe src="subframe.html"></iframe>
+          </body>
+        </html>
+      `,
+      "subframe.html": `
+        <!DOCTYPE html>
+        <html>
+          <head>
+            <meta charset="utf-8">
+          </head>
+        </html>
+      `,
+    },
+  });
+  info("load complete");
+
+  yield extension.startup();
+  info("startup complete");
+
+  let {
+    collectedDetails,
+    getAllFramesDetails,
+    getFrameResults,
+  } = yield extension.awaitMessage("webNavigationFrames.done");
+
+  is(getAllFramesDetails.length, 3, "expected number of frames found");
+  is(getAllFramesDetails.length, collectedDetails.length, "number of frames found should equal the number onCompleted events collected");
+
+  // ordered by frameId
+  let sortByFrameId = (el) => el.frameId;
+
+  collectedDetails = collectedDetails.sort(sortByFrameId);
+  getAllFramesDetails = getAllFramesDetails.sort(sortByFrameId);
+  getFrameResults = getFrameResults.sort(sortByFrameId);
+
+  info("check frame details content");
+
+  Assert.deepEqual(getFrameResults, getAllFramesDetails, "getFrame and getAllFrames should return the same results");
+
+  info(`check frame details collected and retrieved with getAllFrames`);
+
+  for (let i = 0; i < collectedDetails.length; i++) {
+    let collected = collectedDetails[i];
+    let getAllFramesDetail = getAllFramesDetails[i];
+
+    is(getAllFramesDetail.frameId, collected.frameId, "frameId");
+    is(getAllFramesDetail.parentFrameId, collected.parentFrameId, "parentFrameId");
+    is(getAllFramesDetail.tabId, collected.tabId, "tabId");
+
+    // Bug-XXX: moz-extension url are resolved as jar urls in webNavigation events
+    // is(getAllFramesDetail.url, collected.url, "url");
+  }
+
+  info("frame details content checked");
+
+  yield extension.unload();
+  info("extension unloaded");
+});
