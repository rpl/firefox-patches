# HG changeset patch
# User Luca Greco <luca.greco@alcacoop.it>

Bug 1190685 - [webext] Add webNavigation.getFrame/getAllFrames test cases. r=kmag

---
 .../components/extensions/test/browser/browser.ini |   1 +
 .../browser/browser_ext_webNavigation_getFrames.js | 173 +++++++++++++++++++++
 2 files changed, 174 insertions(+)
 create mode 100644 browser/components/extensions/test/browser/browser_ext_webNavigation_getFrames.js

diff --git a/browser/components/extensions/test/browser/browser.ini b/browser/components/extensions/test/browser/browser.ini
index e6e16af..d92e71f 100644
--- a/browser/components/extensions/test/browser/browser.ini
+++ b/browser/components/extensions/test/browser/browser.ini
@@ -27,8 +27,9 @@ support-files =
 [browser_ext_tabs_update.js]
 [browser_ext_tabs_onUpdated.js]
 [browser_ext_tabs_sendMessage.js]
 [browser_ext_tabs_move.js]
 [browser_ext_tabs_move_window.js]
 [browser_ext_windows_update.js]
 [browser_ext_contentscript_connect.js]
 [browser_ext_tab_runtimeConnect.js]
+[browser_ext_webNavigation_getFrames.js]
\ No newline at end of file
diff --git a/browser/components/extensions/test/browser/browser_ext_webNavigation_getFrames.js b/browser/components/extensions/test/browser/browser_ext_webNavigation_getFrames.js
new file mode 100644
index 0000000..b8f7ee3
--- /dev/null
+++ b/browser/components/extensions/test/browser/browser_ext_webNavigation_getFrames.js
@@ -0,0 +1,173 @@
+/* -*- Mode: indent-tabs-mode: nil; js-indent-level: 2 -*- */
+/* vim: set sts=2 sw=2 et tw=80: */
+"use strict";
+
+const NO_CERT_URL = "https://fail-handshake.example.com/";
+
+add_task(function* testWebNavigationGetNonExistentFrames() {
+  let extension = ExtensionTestUtils.loadExtension({
+    background: "(" + function() {
+      let results = [];
+      results.push(new Promise((resolve) => {
+        browser.webNavigation.getAllFrames({ tabId: 0 }, (res) => {
+          browser.test.assertEq(res.length, 0, "getAllFrames should return an empty array for non existent tab");
+          resolve();
+        });
+      }));
+      results.push(new Promise((resolve) => {
+        browser.webNavigation.getFrame({ tabId: 0, frameId: 15, processId: 20}, (res) => {
+          browser.test.assertEq(res, undefined, "getFrame should return undefined for non existent frame ");
+          resolve();
+        });
+      }));
+      Promise.all(results).then(() => {
+        browser.test.sendMessage("getNonExistentFrames.done");
+      });
+    } + ")();",
+    manifest: {
+      permissions: ["webNavigation"],
+    },
+  });
+  info("load complete");
+
+  yield extension.startup();
+  info("startup complete");
+
+  yield extension.awaitMessage("getNonExistentFrames.done");
+
+  yield extension.unload();
+  info("extension unloaded");
+});
+
+add_task(function* testWebNavigationGetFrames() {
+  let extension = ExtensionTestUtils.loadExtension({
+    background: "(" + function() {
+      browser.webNavigation.onErrorOccurred.addListener((errorOccurredDetails) => {
+        let { tabId } = errorOccurredDetails;
+        browser.webNavigation.getAllFrames({ tabId }, (getAllFramesDetails) => {
+          let { frameId } = getAllFramesDetails[0];
+          browser.webNavigation.getFrame({ tabId, frameId, processId: 0 }, (getFrameDetail) => {
+            browser.test.sendMessage("getAllFrames.details", {
+              errorOccurredDetails,
+              getAllFramesDetails,
+              getFrameDetail,
+            });
+          });
+        });
+      });
+    } + ")();",
+    manifest: {
+      permissions: ["webNavigation", "tabs"],
+    },
+  });
+  info("load complete");
+
+  yield extension.startup();
+  info("startup complete");
+
+  let tab = gBrowser.addTab(NO_CERT_URL);
+  info("test page opened");
+
+  let {
+    errorOccurredDetails, getAllFramesDetails, getFrameDetail,
+  } = yield extension.awaitMessage("getAllFrames.details");
+
+  is(errorOccurredDetails.url, NO_CERT_URL, "an onErrorOccurred event should has been raised with the expected URL");
+
+  let errorOccurredFrameFound = getAllFramesDetails.filter((frameDetail) => {
+    return frameDetail.errorOccurred &&
+      (frameDetail.tabId == errorOccurredDetails.tabId) &&
+      (frameDetail.frameId == errorOccurredDetails.frameId) &&
+      (frameDetail.parentFrameId == errorOccurredDetails.parentFrameId) &&
+      (frameDetail.url == errorOccurredDetails.url);
+  }).length > 0;
+
+  ok(errorOccurredFrameFound, "getAllFrames marked the expected frame with the errorOccurred FrameDetail field");
+
+  is(getFrameDetail.url, errorOccurredDetails.url, "getFrame returned a frame with the expected URL");
+  is(getFrameDetail.tabId, errorOccurredDetails.tabId, "getFrame returned a frame with the expected tabId");
+  is(getFrameDetail.frameId, 0, "getFrame returned a frame with the expected frameId");
+  is(getFrameDetail.parentFrameId, -1, "getFrame returned a frame with the expected parentFrameId");
+
+  yield extension.unload();
+  info("extension unloaded");
+
+  gBrowser.removeTab(tab);
+});
+
+add_task(function* testWebNavigationErrorInSubFrame() {
+  let extension = ExtensionTestUtils.loadExtension({
+    background: "(" + function() {
+      let tabId;
+
+      browser.tabs.create({ url: "tab.html" }, (tab) => {
+        tabId = tab.id;
+      });
+
+      browser.webNavigation.onErrorOccurred.addListener((details) => {
+        browser.webNavigation.getAllFrames({ tabId }, (getAllFramesDetails) => {
+          let getFramePromises = getAllFramesDetails.map((frameDetail) => {
+            let { frameId } = frameDetail;
+            return new Promise((resolve) => {
+              browser.webNavigation.getFrame({ tabId, frameId, processId: 0 }, resolve);
+            });
+          });
+
+          Promise.all(getFramePromises).then((getFrameResults) => {
+            browser.tabs.remove(tabId);
+
+            browser.test.sendMessage("errorIsSubFrame.done", {
+              getAllFramesDetails, getFrameResults,
+            });
+          });
+        });
+      });
+    } + ")();",
+    manifest: {
+      permissions: ["webNavigation", "tabs"],
+    },
+    files: {
+      "tab.html": `
+        <!DOCTYPE html>
+        <html>
+          <head>
+            <meta charset="utf-8">
+          </head>
+          <body>
+            <iframe src="subframe.html"></iframe>
+            <iframe src="${NO_CERT_URL}"></iframe>
+          </body>
+        </html>
+      `,
+      "subframe.html": `
+        <!DOCTYPE html>
+        <html>
+          <head>
+            <meta charset="utf-8">
+          </head>
+        </html>
+      `,
+    },
+  });
+  info("load complete");
+
+  yield extension.startup();
+  info("startup complete");
+
+  let {
+    getAllFramesDetails,
+    getFrameResults,
+  } = yield extension.awaitMessage("errorIsSubFrame.done");
+
+  is(getAllFramesDetails.length, 3, "expected number of frames found");
+
+  let errorFrames = getAllFramesDetails.filter((el) => el.errorOccurred);
+  is(errorFrames.length, 1, "expected number of frames with errors found");
+  is(errorFrames[0].url, NO_CERT_URL, "expected url found with errors");
+
+  is(JSON.stringify(getFrameResults), JSON.stringify(getAllFramesDetails),
+     "getFrame is able to retrieve all the frames returned by GetAllFrames");
+
+  yield extension.unload();
+  info("extension unloaded");
+});

