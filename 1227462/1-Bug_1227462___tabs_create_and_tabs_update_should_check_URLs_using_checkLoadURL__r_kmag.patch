# HG changeset patch
# User Luca Greco <lgreco@mozilla.com>
# Date 1455130354 -3600
#      Wed Feb 10 19:52:34 2016 +0100
# Node ID 3e7ccc4d8d279ab5d03ddb4a852fb500d2d5be19
# Parent  7e5ceea9eb9e152860cc2fe2c612ed4c5dc610d9
Bug 1227462 - tabs.create and tabs.update should check URLs using checkLoadURL. r=kmag

MozReview-Commit-ID: EKFRpoSuXrF

diff --git a/browser/components/extensions/ext-tabs.js b/browser/components/extensions/ext-tabs.js
--- a/browser/components/extensions/ext-tabs.js
+++ b/browser/components/extensions/ext-tabs.js
@@ -392,26 +392,30 @@ extensions.registerSchemaAPI("tabs", nul
           AllWindowEvents.removeListener("progress", progressListener);
           AllWindowEvents.removeListener("TabAttrModified", listener);
           AllWindowEvents.removeListener("TabPinned", listener);
           AllWindowEvents.removeListener("TabUnpinned", listener);
         };
       }).api(),
 
       create: function(createProperties) {
-        return new Promise(resolve => {
+        return new Promise((resolve, reject) => {
           function createInWindow(window) {
             let url;
+
             if (createProperties.url !== null) {
               url = context.uri.resolve(createProperties.url);
-            } else {
-              url = window.BROWSER_NEW_TAB_URL;
+
+              if (!context.checkLoadURL(url, { dontReportErrors: true })) {
+                reject({ message: `URL not allowed: ${url}`});
+                return;
+              }
             }
 
-            let tab = window.gBrowser.addTab(url);
+            let tab = window.gBrowser.addTab(url || window.BROWSER_NEW_TAB_URL);
 
             let active = true;
             if (createProperties.active !== null) {
               active = createProperties.active;
             }
             if (active) {
               window.gBrowser.selectedTab = tab;
             }
@@ -455,20 +459,33 @@ extensions.registerSchemaAPI("tabs", nul
           tab.ownerDocument.defaultView.gBrowser.removeTab(tab);
         }
 
         return Promise.resolve();
       },
 
       update: function(tabId, updateProperties) {
         let tab = tabId !== null ? TabManager.getTab(tabId) : TabManager.activeTab;
+
+        if (!tab) {
+          return Promise.reject({ message: `No tab found with tabId: ${tabId}` });
+        }
+
         let tabbrowser = tab.ownerDocument.defaultView.gBrowser;
+
         if (updateProperties.url !== null) {
-          tab.linkedBrowser.loadURI(updateProperties.url);
+          let url = context.uri.resolve(updateProperties.url);
+
+          if (!context.checkLoadURL(url, { dontReportErrors: true })) {
+            return Promise.reject({ message: `URL not allowed: ${url}`});
+          }
+
+          tab.linkedBrowser.loadURI(url);
         }
+
         if (updateProperties.active !== null) {
           if (updateProperties.active) {
             tabbrowser.selectedTab = tab;
           } else {
             // Not sure what to do here? Which tab should we select?
           }
         }
         if (updateProperties.muted !== null) {
diff --git a/toolkit/components/extensions/ExtensionUtils.jsm b/toolkit/components/extensions/ExtensionUtils.jsm
--- a/toolkit/components/extensions/ExtensionUtils.jsm
+++ b/toolkit/components/extensions/ExtensionUtils.jsm
@@ -142,16 +142,19 @@ class BaseContext {
 
     let flags = ssm.STANDARD;
     if (!options.allowScript) {
       flags |= ssm.DISALLOW_SCRIPT;
     }
     if (!options.allowInheritsPrincipal) {
       flags |= ssm.DISALLOW_INHERIT_PRINCIPAL;
     }
+    if (options.dontReportErrors) {
+      flags |= ssm.DONT_REPORT_ERRORS;
+    }
 
     try {
       ssm.checkLoadURIStrWithPrincipal(this.principal, url, flags);
     } catch (e) {
       return false;
     }
     return true;
   }
