# HG changeset patch
# User Luca Greco <lgreco@mozilla.com>
# Date 1455130507 -3600
#      Wed Feb 10 19:55:07 2016 +0100
# Node ID dbc9c7886616cb640bb16cae9d7e0a320404af46
# Parent  6d20e232f025f8d7836012a5c6fc28e094db3d22
Bug 1227462 - Backport test tabs.create/update on allowed and disallowed URLs to Beta. r=kmag

MozReview-Commit-ID: 2cZST9GwTaw

diff --git a/browser/components/extensions/test/browser/browser.ini b/browser/components/extensions/test/browser/browser.ini
--- a/browser/components/extensions/test/browser/browser.ini
+++ b/browser/components/extensions/test/browser/browser.ini
@@ -19,14 +19,16 @@ support-files =
 [browser_ext_browserAction_popup.js]
 [browser_ext_popup_api_injection.js]
 [browser_ext_contextMenus.js]
 [browser_ext_getViews.js]
 [browser_ext_tabs_executeScript_good.js]
 [browser_ext_tabs_executeScript_bad.js]
 [browser_ext_tabs_query.js]
 [browser_ext_tabs_getCurrent.js]
+[browser_ext_tabs_create_invalid_url.js]
 [browser_ext_tabs_update.js]
+[browser_ext_tabs_update_url.js]
 [browser_ext_tabs_onUpdated.js]
 [browser_ext_tabs_sendMessage.js]
 [browser_ext_windows_update.js]
 [browser_ext_contentscript_connect.js]
 [browser_ext_tab_runtimeConnect.js]
diff --git a/browser/components/extensions/test/browser/browser_ext_tabs_create_invalid_url.js b/browser/components/extensions/test/browser/browser_ext_tabs_create_invalid_url.js
new file mode 100644
--- /dev/null
+++ b/browser/components/extensions/test/browser/browser_ext_tabs_create_invalid_url.js
@@ -0,0 +1,64 @@
+/* -*- Mode: indent-tabs-mode: nil; js-indent-level: 2 -*- */
+/* vim: set sts=2 sw=2 et tw=80: */
+"use strict";
+
+function* testTabsCreateInvalidURL(tabsCreateURL) {
+  let extension = ExtensionTestUtils.loadExtension({
+    manifest: {
+      "permissions": ["tabs"],
+    },
+
+    background: function() {
+      browser.test.sendMessage("ready");
+      browser.test.onMessage.addListener((msg, tabsCreateURL) => {
+        browser.tabs.create({ url: tabsCreateURL }, (tab) => {
+          browser.test.assertEq(undefined, tab, "on error tab should be undefined");
+
+          // Remove the opened tab is any.
+          if (tab) {
+            browser.tabs.remove(tab.id);
+          }
+          browser.test.sendMessage("done");
+        });
+      });
+    },
+  });
+
+  yield extension.startup();
+
+  yield extension.awaitMessage("ready");
+
+  info(`test tab.create on invalid URL "${tabsCreateURL}"`);
+
+  extension.sendMessage("start", tabsCreateURL);
+  yield extension.awaitMessage("done");
+
+  yield extension.unload();
+}
+
+add_task(function* () {
+  info("Start testing tabs.create on invalid URLs");
+
+  let dataURLPage = `data:text/html,
+    <!DOCTYPE html>
+    <html>
+      <head>
+        <meta charset="utf-8">
+      </head>
+      <body>
+        <h1>data url page</h1>
+      </body>
+    </html>`;
+
+  let testCases = [
+    { tabsCreateURL: "about:addons" },
+    { tabsCreateURL: "javascript:console.log('tabs.update execute javascript')" },
+    { tabsCreateURL: dataURLPage },
+  ];
+
+  for (let { tabsCreateURL } of testCases) {
+    yield* testTabsCreateInvalidURL(tabsCreateURL);
+  }
+
+  info("done");
+});
diff --git a/browser/components/extensions/test/browser/browser_ext_tabs_update_url.js b/browser/components/extensions/test/browser/browser_ext_tabs_update_url.js
new file mode 100644
--- /dev/null
+++ b/browser/components/extensions/test/browser/browser_ext_tabs_update_url.js
@@ -0,0 +1,126 @@
+/* -*- Mode: indent-tabs-mode: nil; js-indent-level: 2 -*- */
+/* vim: set sts=2 sw=2 et tw=80: */
+"use strict";
+
+function* testTabsUpdateURL(existentTabURL, tabsUpdateURL, isErrorExpected) {
+  let extension = ExtensionTestUtils.loadExtension({
+    manifest: {
+      "permissions": ["tabs"],
+    },
+
+    files: {
+      "tab.html": `
+        <!DOCTYPE html>
+        <html>
+          <head>
+            <meta charset="utf-8">
+          </head>
+          <body>
+            <h1>tab page</h1>
+          </body>
+        </html>
+      `.trim(),
+    },
+    background: function() {
+      browser.test.sendMessage("ready", browser.runtime.getURL("tab.html"));
+
+      browser.test.onMessage.addListener((msg, tabsUpdateURL, isErrorExpected) => {
+        let onTabsUpdated = (tab) => {
+          if (isErrorExpected) {
+            browser.test.fail(`tabs.update with URL ${tabsUpdateURL} should be rejected`);
+          } else {
+            browser.test.assertTrue(tab, "on success the tab should be defined");
+          }
+        };
+
+        let onTabsUpdateError = (error) => {
+          if (!isErrorExpected) {
+            browser.test.fail(`tabs.update with URL ${tabsUpdateURL} should not be rejected`);
+          } else {
+            browser.test.assertTrue(error, "tabs.update has been rejected as expected");
+          }
+        };
+
+        let onTabsUpdateDone = () => browser.test.sendMessage("done");
+
+        browser.tabs.query({ lastFocusedWindow: true }, (tabs) => {
+          new Promise((resolve, reject) => {
+            browser.tabs.update(tabs[1].id, { url: tabsUpdateURL }, (tabs) => {
+              if (tabs) {
+                resolve(tabs);
+              } else {
+                reject(true);
+              }
+            });
+          }).then(onTabsUpdated, onTabsUpdateError)
+            .then(onTabsUpdateDone);
+        });
+      });
+    },
+  });
+
+  yield extension.startup();
+
+  let mozExtTabURL = yield extension.awaitMessage("ready");
+
+  if (tabsUpdateURL == "self") {
+    tabsUpdateURL = mozExtTabURL;
+  }
+
+  info(`tab.update URL "${tabsUpdateURL}" on tab with URL "${existentTabURL}"`);
+
+  let tab1 = yield BrowserTestUtils.openNewForegroundTab(gBrowser, existentTabURL);
+
+  extension.sendMessage("start", tabsUpdateURL, isErrorExpected);
+  yield extension.awaitMessage("done");
+
+  yield BrowserTestUtils.removeTab(tab1);
+  yield extension.unload();
+}
+
+add_task(function* () {
+  info("Start testing tabs.update on javascript URLs");
+
+  let dataURLPage = `data:text/html,
+    <!DOCTYPE html>
+    <html>
+      <head>
+        <meta charset="utf-8">
+      </head>
+      <body>
+        <h1>data url page</h1>
+      </body>
+    </html>`;
+
+  let checkList = [
+    {
+      tabsUpdateURL: "http://example.net",
+      isErrorExpected: false,
+    },
+    {
+      tabsUpdateURL: "self",
+      isErrorExpected: false,
+    },
+    {
+      tabsUpdateURL: "about:addons",
+      isErrorExpected: true,
+    },
+    {
+      tabsUpdateURL: "javascript:console.log('tabs.update execute javascript')",
+      isErrorExpected: true,
+    },
+    {
+      tabsUpdateURL: dataURLPage,
+      isErrorExpected: true,
+    },
+  ];
+
+  let testCases = checkList
+        .map((check) => Object.assign({}, check, { existentTabURL: "about:blank" }));
+
+  for (let { existentTabURL, tabsUpdateURL, isErrorExpected } of testCases) {
+    yield* testTabsUpdateURL(existentTabURL, tabsUpdateURL, isErrorExpected);
+  }
+
+  info("done");
+});
