# HG changeset patch
# User Luca Greco <lgreco@mozilla.com>

Bug 1227462 - tabs.update should call checkLoadURL. r=kmag

---
 browser/components/extensions/ext-tabs.js | 54 ++++++++++++++++++++++---------
 1 file changed, 38 insertions(+), 16 deletions(-)

diff --git a/browser/components/extensions/ext-tabs.js b/browser/components/extensions/ext-tabs.js
index f724d8f..1d2b4e5 100644
--- a/browser/components/extensions/ext-tabs.js
+++ b/browser/components/extensions/ext-tabs.js
@@ -318,37 +318,59 @@ extensions.registerSchemaAPI("tabs", null, (extension, context) => {
         if (callback) {
           runSafe(context, callback);
         }
       },
 
       update: function(tabId, updateProperties, callback) {
         let tab = tabId !== null ? TabManager.getTab(tabId) : TabManager.activeTab;
         let tabbrowser = tab.ownerDocument.defaultView.gBrowser;
-        if (updateProperties.url !== null) {
-          tab.linkedBrowser.loadURI(updateProperties.url);
-        }
-        if (updateProperties.active !== null) {
-          if (updateProperties.active) {
-            tabbrowser.selectedTab = tab;
-          } else {
-            // Not sure what to do here? Which tab should we select?
+
+        if (tab) {
+          // FIXME: highlighted/selected, muted, openerTabId
+
+          if (updateProperties.active !== null) {
+            if (updateProperties.active) {
+              tabbrowser.selectedTab = tab;
+            } else {
+              // Not sure what to do here? Which tab should we select?
+            }
           }
-        }
-        if (updateProperties.pinned !== null) {
-          if (updateProperties.pinned) {
-            tabbrowser.pinTab(tab);
-          } else {
-            tabbrowser.unpinTab(tab);
+          if (updateProperties.pinned !== null) {
+            if (updateProperties.pinned) {
+              tabbrowser.pinTab(tab);
+            } else {
+              tabbrowser.unpinTab(tab);
+            }
+          }
+
+          if (updateProperties.url !== null) {
+            if (context.checkLoadURL(updateProperties.url)) {
+              tab.linkedBrowser.loadURI(updateProperties.url);
+            } else {
+              // TODO: runtime.lastError should be set to `Invalid url: ${updateProperties.url}`
+
+              // If the URL was the only update properties and it is invalid
+              // then the calback |tab| parameter should be undefined.
+              let keyIsNotURL = (k) => k !== "url";
+              let valueIsNotNull = (k) => updateProperties[k] !== null;
+              let otherUpdatedProperties = Object.keys(updateProperties)
+                                                 .filter(keyIsNotURL)
+                                                 .some(valueIsNotNull);
+              if (!otherUpdatedProperties) {
+                tab = undefined;
+              }
+            }
           }
+        } else {
+          // TODO: runtime.lastError should be set to `No tab with id: ${tabId}`
         }
-        // FIXME: highlighted/selected, muted, openerTabId
 
         if (callback) {
-          runSafe(context, callback, TabManager.convert(extension, tab));
+          runSafe(context, callback, tab && TabManager.convert(extension, tab));
         }
       },
 
       reload: function(tabId, reloadProperties, callback) {
         let tab = tabId !== null ? TabManager.getTab(tabId) : TabManager.activeTab;
         let flags = Ci.nsIWebNavigation.LOAD_FLAGS_NONE;
         if (reloadProperties && reloadProperties.bypassCache) {
           flags |= Ci.nsIWebNavigation.LOAD_FLAGS_BYPASS_CACHE;

