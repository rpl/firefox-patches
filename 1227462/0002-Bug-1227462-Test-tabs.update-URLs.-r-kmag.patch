# HG changeset patch
# User Luca Greco <luca.greco@alcacoop.it>

Bug 1227462 - Test tabs.update URLs. r=kmag

---
 .../test/browser/browser_ext_tabs_update.js        | 144 +++++++++++++++++++++
 1 file changed, 144 insertions(+)

diff --git a/browser/components/extensions/test/browser/browser_ext_tabs_update.js b/browser/components/extensions/test/browser/browser_ext_tabs_update.js
index 8e56a74..3f3437f 100644
--- a/browser/components/extensions/test/browser/browser_ext_tabs_update.js
+++ b/browser/components/extensions/test/browser/browser_ext_tabs_update.js
@@ -38,8 +38,152 @@ add_task(function* () {
 
   ok(gBrowser.selectedTab == tab2, "correct tab selected");
 
   yield extension.unload();
 
   yield BrowserTestUtils.removeTab(tab1);
   yield BrowserTestUtils.removeTab(tab2);
 });
+
+Components.utils.import("resource://gre/modules/Services.jsm");
+let ConsoleAPIStorage = Components.classes["@mozilla.org/consoleAPI-storage;1"]
+      .getService(Components.interfaces.nsIConsoleAPIStorage);
+
+function* testTabsUpdateURL(existentTabURL, tabsUpdateURL) {
+  let extension = ExtensionTestUtils.loadExtension({
+    manifest: {
+      "backgound": { scripts: ["background.js"] },
+      "permissions": ["tabs"],
+      "webAccessibleResources": [ "tab.html" ],
+    },
+
+    files: {
+      "tab.html": `
+        <!DOCTYPE>
+        <html>
+          <head>
+            <meta charset="utf-8">
+          </head>
+          <body>
+            <h1>tab page</h1>
+          </body>
+        </html>
+      `,
+    },
+    background: function() {
+      browser.test.sendMessage("ready", browser.runtime.getURL("tab.html"));
+      browser.test.onMessage.addListener((msg, tabsUpdateURL) => {
+        browser.tabs.query({ lastFocusedWindow: true }, function(tabs) {
+          let updates = [];
+
+          for (let tab of tabs.slice(1)) {
+            updates.push(new Promise((resolve, reject) => {
+              browser.tabs.update(tab.id, {
+                url: tabsUpdateURL,
+              }, resolve);
+            }));
+          }
+
+          Promise.all(updates).then(() => {
+            browser.test.sendMessage("done");
+          });
+        });
+      });
+    },
+  });
+
+  yield extension.startup();
+
+  let mozExtTabURL = yield extension.awaitMessage("ready");
+
+  if (existentTabURL == "self") {
+    existentTabURL = mozExtTabURL;
+  }
+
+  if (tabsUpdateURL == "self") {
+    tabsUpdateURL = mozExtTabURL;
+  }
+
+  info(`tab.update URL "${tabsUpdateURL}" on tab with URL "${existentTabURL}"`);
+
+  let tab1 = yield BrowserTestUtils.openNewForegroundTab(gBrowser, existentTabURL);
+  gBrowser.selectedTab = tab1;
+
+  extension.sendMessage("start", tabsUpdateURL);
+  yield extension.awaitMessage("done");
+
+  yield BrowserTestUtils.removeTab(tab1);
+  yield extension.unload();
+
+  let errors = Services.console.getMessageArray() || [];
+
+  Services.console.reset();
+  ConsoleAPIStorage.clearEvents();
+
+  return errors;
+}
+
+add_task(function* () {
+  info("Start testing tabs.update on javascript URLs");
+
+  let errorRegExp = /Permission denied on tabs.update/;
+
+  let checkList = [
+    {
+      tabsUpdateURL: "http://example.net",
+      expectedError: false,
+    },
+    {
+      tabsUpdateURL: "about:addons",
+      expectedError: false,
+    },
+    {
+      tabsUpdateURL: "self",
+      expectedError: false,
+    },
+    {
+      tabsUpdateURL: "javascript:console.log('tabs.update execute javascript')",
+      expectedError: true,
+    },
+    {
+      tabsUpdateURL: "data:text/html,<h1>data url page</h1>",
+      expectedError: true,
+    },
+  ];
+
+  let dataURLPage = `
+    data:text/html,<!DOCTYPE html>
+    <html>
+      <head>
+        <meta charset="utf-8">
+      </head>
+      <body>
+        <h1>data url page</h1>
+      </body>
+    </html>`;
+
+  let existentTabURLList = [
+    "http://example.net", "about:robots", "self", dataURLPage,
+  ];
+
+  let testCases = existentTabURLList.reduce((acc, existentTabURL) => {
+    let testSet = checkList
+          .map((check) => Object.assign({}, check, { existentTabURL }))
+          .filter(el => el.tabsUpdateURL != el.existentTabURL);
+
+    return acc.concat(testSet);
+  }, []);
+
+  for (let { existentTabURL, tabsUpdateURL, expectedError } of testCases) {
+    let errors = yield* testTabsUpdateURL(existentTabURL, tabsUpdateURL);
+
+    let errorCount = errors.filter((error) => errorRegExp.test(error)).length;
+
+    if (expectedError) {
+      is(errorCount, 1, "The number of errors found should be 1");
+    } else {
+      is(errorCount, 0, "The number of errors found should be 0");
+    }
+  }
+
+  info("done");
+});

