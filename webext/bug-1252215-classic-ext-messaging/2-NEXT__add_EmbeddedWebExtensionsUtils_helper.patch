# HG changeset patch
# User Luca Greco <lgreco@mozilla.com>
# Date 1461780440 -7200
#      Wed Apr 27 20:07:20 2016 +0200
# Node ID ad203d6770991e4d40b2e8987b435f11800a5916
# Parent  ed10ea9e02488d41b5c590452747d769ed7a5037
NEXT: add EmbeddedWebExtensionsUtils helper

This patch introduces a new exported helper: EmbeddedWebExtensionsUtils
which is going to be integrated in the XPIProvider to provide the
Embedded WebExtension to the Classic Extensions which require it
in their install.rdf

MozReview-Commit-ID: 7M1DRkXjGat

diff --git a/toolkit/components/extensions/ClassicExtensionsUtils.jsm b/toolkit/components/extensions/ClassicExtensionsUtils.jsm
--- a/toolkit/components/extensions/ClassicExtensionsUtils.jsm
+++ b/toolkit/components/extensions/ClassicExtensionsUtils.jsm
@@ -1,29 +1,33 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
-this.EXPORTED_SYMBOLS = ["ClassicExtensionContext"];
+this.EXPORTED_SYMBOLS = ["ClassicExtensionContext", "EmbeddedWebExtensionsUtils"];
 
-/* exported ClassicExtensionContext */
+/* exported ClassicExtensionContext, EmbeddedWebExtensionsUtils */
 
 /**
  * This file exports helpers for Classic Extensions that wants to embed a webextensions
  * and exchange messages with the embedded WebExtensions' contexts.
  */
 
 const Ci = Components.interfaces;
 const Cc = Components.classes;
 const Cu = Components.utils;
 const Cr = Components.results;
 const CC = Components.Constructor;
 
+Cu.import("resource://gre/modules/XPCOMUtils.jsm");
+XPCOMUtils.defineLazyModuleGetter(this, "Extension",
+                                  "resource://gre/modules/Extension.jsm");
+
 Cu.import("resource://gre/modules/Services.jsm");
 
 Cu.import("resource://gre/modules/ExtensionUtils.jsm");
 const {
   Messenger,
   BaseContext,
 } = ExtensionUtils;
 
@@ -87,8 +91,96 @@ var ClassicExtensionContext = class exte
     // Return the addon principal.
     return this[ns].addonPrincipal;
   }
 
   get api() {
     return this[ns].api;
   }
 };
+
+class EmbeddedWebExtension {
+  constructor({id, resourceURI}, containerContextURL) {
+    this.addonId = id;
+
+    this.classicExtensionContext = new ClassicExtensionContext({
+      id,
+      url: containerContextURL,
+    });
+
+    let webextensionURI = Services.io.newURI(resourceURI.resolve("webextension/"), null, null);
+
+    this.webextension = new Extension({
+      id,
+      resourceURI: webextensionURI,
+    });
+
+    // destroy the ClassicExtensionContext cloneScope when
+    // the embedded webextensions is closed.
+    this.webextension.callOnClose(this.classicExtensionContext);
+  }
+
+  get api() {
+    return this.classicExtensionContext.api;
+  }
+
+  startup() {
+    this.webextension.startup()
+      .catch((err) => {
+        // Report an error if the embedded webextension fails during
+        // its startup.
+        let id = this.addonId;
+        Cu.reportError(`Embedded WebExtension startup failed for addonId ${id}: ${err}`);
+      });
+  }
+
+  shutdown() {
+    this.webextension.shutdown();
+  }
+}
+
+
+// Map of the existent embeddedWebExtensions by add-on id,
+// used to retrieve the EmbeddedWebExtension class instances
+// between calls to callBootstrapMethod in the XPIProvider.
+const embeddedWebExtensionsMap = new Map();
+
+/**
+ *  This exported helper is used in the XPIProvider
+ *  to automatically provide
+ *  the ClassicExtensionContext instance to both
+ *  bootstrap.js or SDK based add-ons that request it
+ *  through their install.rdf metadata.
+ */
+var EmbeddedWebExtensionsUtils = {
+  getAPIFor({id, resourceURI}, containerURL) {
+    let embeddedWebExtension;
+
+    // Create the embeddedWebExtension helper instance if it doesn't
+    // exist yet.
+    if (!embeddedWebExtensionsMap.has(id)) {
+      embeddedWebExtension = new EmbeddedWebExtension({id, resourceURI}, containerURL);
+      embeddedWebExtensionsMap.set(id, embeddedWebExtension);
+    } else {
+      embeddedWebExtension = embeddedWebExtensionsMap.get(id);
+    }
+
+    return embeddedWebExtension.api;
+  },
+
+  startupFor({id}) {
+    let embeddedWebExtension = embeddedWebExtensionsMap.get(id);
+    if (embeddedWebExtension) {
+      embeddedWebExtension.startup();
+    } else {
+      Cu.reportError(`No embedded WebExtension found for addonId ${id}`);
+    }
+  },
+
+  shutdownFor({id}) {
+    let embeddedWebExtension = embeddedWebExtensionsMap.get(id);
+    if (embeddedWebExtension) {
+      embeddedWebExtension.startup();
+    } else {
+      Cu.reportError(`No embedded WebExtension found for addonId ${id}`);
+    }
+  },
+};
