# HG changeset patch
# User Luca Greco <lgreco@mozilla.com>
# Date 1459990826 -7200
#      Thu Apr 07 03:00:26 2016 +0200
# Node ID def8a9d980fd4e7095dcf04bd67f0f9f06bb7369
# Parent  419922c1f15f5f3edeb516e9922928e1d6b02910
Bug 1262794 - [webext] fix missing webNavigation onCommitted event on iframes loading.

MozReview-Commit-ID: JSZFCWr2WNk

diff --git a/toolkit/components/extensions/test/mochitest/test_ext_webnavigation.html b/toolkit/components/extensions/test/mochitest/test_ext_webnavigation.html
--- a/toolkit/components/extensions/test/mochitest/test_ext_webnavigation.html
+++ b/toolkit/components/extensions/test/mochitest/test_ext_webnavigation.html
@@ -145,19 +145,36 @@ add_task(function* webnav_ordering() {
 
     let index1 = find(action1);
     let index2 = find(action2);
     ok(index1 != -1, `Action ${JSON.stringify(action1)} happened`);
     ok(index2 != -1, `Action ${JSON.stringify(action2)} happened`);
     ok(index1 < index2, `Action ${JSON.stringify(action1)} happened before ${JSON.stringify(action2)}`);
   }
 
+  // As required in the webNavigation API documentation:
+  //   If a navigating frame contains subframes, its onCommitted is fired before any
+  //   of its children's onBeforeNavigate; while onCompleted is fired after
+  //   all of its children's onCompleted.
   checkBefore({url: URL, event: "onCommitted"}, {url: FRAME, event: "onBeforeNavigate"});
   checkBefore({url: FRAME, event: "onCompleted"}, {url: URL, event: "onCompleted"});
 
+  // As required in the webNAvigation API documentation, check the event sequence:
+  //   onBeforeNavigate -> onCommitted -> onDOMContentLoaded -> onCompleted
+  let expectedEventSequence = [
+    "onBeforeNavigate", "onCommitted", "onDOMContentLoaded", "onCompleted",
+  ];
+
+  for (let i = 1; i < expectedEventSequence.length; i++) {
+    let after = expectedEventSequence[i];
+    let before = expectedEventSequence[i - 1];
+    checkBefore({url: URL, event: before}, {url: URL, event: after});
+    checkBefore({url: FRAME, event: before}, {url: FRAME, event: after});
+  }
+
   yield loadAndWait(win, "onCompleted", FRAME2, () => { win.frames[0].location = FRAME2; });
 
   checkRequired(FRAME2);
 
   let navigationSequence = [
     {
       action: () => { win.frames[0].document.getElementById("elt").click(); },
       waitURL: `${FRAME2}#ref`,
diff --git a/toolkit/modules/addons/WebNavigationContent.js b/toolkit/modules/addons/WebNavigationContent.js
--- a/toolkit/modules/addons/WebNavigationContent.js
+++ b/toolkit/modules/addons/WebNavigationContent.js
@@ -49,34 +49,35 @@ var WebProgressListener = {
       return;
     }
     let webProgress = docShell.QueryInterface(Ci.nsIInterfaceRequestor)
                               .getInterface(Ci.nsIWebProgress);
     webProgress.removeProgressListener(this);
   },
 
   onStateChange: function onStateChange(webProgress, request, stateFlags, status) {
+    let locationURI = request.QueryInterface(Ci.nsIChannel).URI;
     let data = {
-      requestURL: request.QueryInterface(Ci.nsIChannel).URI.spec,
+      requestURL: locationURI.spec,
       windowId: webProgress.DOMWindowID,
       parentWindowId: WebNavigationFrames.getParentWindowId(webProgress.DOMWindow),
       status,
       stateFlags,
     };
 
     sendAsyncMessage("Extension:StateChange", data);
 
-    if (webProgress.DOMWindow.top != webProgress.DOMWindow) {
-      let webNav = webProgress.QueryInterface(Ci.nsIWebNavigation);
-      if (!webNav.canGoBack) {
-        // For some reason we don't fire onLocationChange for the
-        // initial navigation of a sub-frame. So we need to simulate
-        // it here.
-        this.onLocationChange(webProgress, request, request.QueryInterface(Ci.nsIChannel).URI, 0);
-      }
+    if (stateFlags & Ci.nsIWebProgressListener.STATE_IS_DOCUMENT) {
+      // For some reason we don't fire onLocationChange for the
+      // initial navigation of a sub-frame. So we need to simulate
+      // it here.
+      this.processStateDocument({
+        webProgress, request, locationURI,
+        flags: 0,
+      });
     }
   },
 
   onLocationChange: function onLocationChange(webProgress, request, locationURI, flags) {
     let {DOMWindow, loadType} = webProgress;
 
     // Get the previous URI loaded in the DOMWindow.
     let previousURI = this.previousURIMap.get(DOMWindow);
@@ -103,18 +104,30 @@ var WebProgressListener = {
         isReferenceFragmentUpdated = true;
       } else if (loadType & Ci.nsIDocShell.LOAD_CMD_PUSHSTATE) {
         isHistoryStateUpdated = true;
       } else if (loadType & Ci.nsIDocShell.LOAD_CMD_HISTORY) {
         isHistoryStateUpdated = true;
       }
     }
 
+    if (isHistoryStateUpdated || isReferenceFragmentUpdated) {
+      let data = {
+        isHistoryStateUpdated, isReferenceFragmentUpdated,
+        location: locationURI ? locationURI.spec : "",
+        windowId: webProgress.DOMWindowID,
+        parentWindowId: WebNavigationFrames.getParentWindowId(webProgress.DOMWindow),
+      };
+
+      sendAsyncMessage("Extension:LocationChange", data);
+    }
+  },
+
+  processStateDocument({webProgress, request, locationURI, flags}) {
     let data = {
-      isHistoryStateUpdated, isReferenceFragmentUpdated,
       location: locationURI ? locationURI.spec : "",
       windowId: webProgress.DOMWindowID,
       parentWindowId: WebNavigationFrames.getParentWindowId(webProgress.DOMWindow),
     };
 
     sendAsyncMessage("Extension:LocationChange", data);
   },
 
