# HG changeset patch
# User Luca Greco <luca.greco@alcacoop.it>
# Date 1458672650 -3600
#      Tue Mar 22 19:50:50 2016 +0100
# Node ID 47e7f9c3e9f7311e01f0575127ce638fca1c3832
# Parent  3dc5292ed66afbca801c33bff49c86154b3b3c24
Bug 1211665 - Log messages generated from WebExtensions pages should contains a ConsoleID. r?baku

- get the addonId from the Principal origin attributes, if any
- tag addon Console API messages with a custom consoleID ("addon/ID"),
  which is how the Addon Console RDP Actor recognize the messages that have to be
  collected and shown in the Addon Console Panel

MozReview-Commit-ID: 2EaGgtUQ8uo

diff --git a/dom/base/Console.cpp b/dom/base/Console.cpp
--- a/dom/base/Console.cpp
+++ b/dom/base/Console.cpp
@@ -219,16 +219,18 @@ public:
   } mIDType;
 
   uint64_t mOuterIDNumber;
   nsString mOuterIDString;
 
   uint64_t mInnerIDNumber;
   nsString mInnerIDString;
 
+  nsString mConsoleID;
+
   nsString mMethodString;
 
   // Stack management is complicated, because we want to do it as
   // lazily as possible.  Therefore, we have the following behavior:
   // 1)  mTopStackFrame is initialized whenever we have any JS on the stack
   // 2)  mReifiedStack is initialized if we're created in a worker.
   // 3)  mStack is set (possibly to null if there is no JS on the stack) if
   //     we're created on main thread.
@@ -792,16 +794,30 @@ Console::Console(nsPIDOMWindowInner* aWi
 
     // Without outerwindow any console message coming from this object will not
     // shown in the devtools webconsole. But this should be fine because
     // probably we are shutting down, or the window is CCed/GCed.
     nsPIDOMWindowOuter* outerWindow = mWindow->GetOuterWindow();
     if (outerWindow) {
       mOuterID = outerWindow->WindowID();
     }
+
+    // Customize the consoleID if the script object principal has
+    // an addonId.
+    nsCOMPtr<nsIScriptObjectPrincipal> sop = do_QueryInterface(mWindow);
+    if (sop) {
+      nsIPrincipal* principal = sop->GetPrincipal();
+      if (principal) {
+        PrincipalOriginAttributes poa = BasePrincipal::Cast(principal)->OriginAttributesRef();
+        if (!poa.mAddonId.IsEmpty()) {
+          mConsoleID.Insert(MOZ_UTF16("addon/"), 0);
+          mConsoleID.Append(poa.mAddonId);
+        }
+      }
+    }
   }
 
   if (NS_IsMainThread()) {
     nsCOMPtr<nsIObserverService> obs = mozilla::services::GetObserverService();
     if (obs) {
       obs->AddObserver(this, "inner-window-destroyed", true);
     }
   }
@@ -1338,16 +1354,17 @@ Console::ProcessCallData(ConsoleCallData
     return;
   }
   JSContext* cx = jsapi.cx();
   ClearException ce(cx);
   RootedDictionary<ConsoleEvent> event(cx);
 
   event.mID.Construct();
   event.mInnerID.Construct();
+  event.mConsoleID = mConsoleID;
 
   MOZ_ASSERT(aData->mIDType != ConsoleCallData::eUnknown);
   if (aData->mIDType == ConsoleCallData::eString) {
     event.mID.Value().SetAsString() = aData->mOuterIDString;
     event.mInnerID.Value().SetAsString() = aData->mInnerIDString;
   } else {
     MOZ_ASSERT(aData->mIDType == ConsoleCallData::eNumber);
     event.mID.Value().SetAsUnsignedLongLong() = aData->mOuterIDNumber;
diff --git a/dom/base/Console.h b/dom/base/Console.h
--- a/dom/base/Console.h
+++ b/dom/base/Console.h
@@ -305,16 +305,17 @@ private:
   nsTArray<ConsoleCallData*> mConsoleCallDataArray;
 
 #ifdef DEBUG
   PRThread* mOwningThread;
 #endif
 
   uint64_t mOuterID;
   uint64_t mInnerID;
+  nsString mConsoleID;
 
   friend class ConsoleCallData;
   friend class ConsoleRunnable;
   friend class ConsoleCallDataRunnable;
   friend class ConsoleProfileRunnable;
 };
 
 } // namespace dom
diff --git a/dom/webidl/Console.webidl b/dom/webidl/Console.webidl
--- a/dom/webidl/Console.webidl
+++ b/dom/webidl/Console.webidl
@@ -40,16 +40,17 @@ interface Console {
   [BinaryName="noopMethod"]
   void timelineEnd();
 };
 
 // This is used to propagate console events to the observers.
 dictionary ConsoleEvent {
   (unsigned long long or DOMString) ID;
   (unsigned long long or DOMString) innerID;
+  DOMString consoleID = "";
   DOMString level = "";
   DOMString filename = "";
   unsigned long lineNumber = 0;
   unsigned long columnNumber = 0;
   DOMString functionName = "";
   double timeStamp = 0;
   sequence<any> arguments;
   sequence<DOMString?> styles;
