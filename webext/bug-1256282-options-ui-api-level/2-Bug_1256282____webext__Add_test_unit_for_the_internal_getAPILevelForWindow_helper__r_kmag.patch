# HG changeset patch
# User Luca Greco <lgreco@mozilla.com>
# Date 1458845346 -3600
#      Thu Mar 24 19:49:06 2016 +0100
# Node ID ea7f88d7986d6e9a1af718e4396b655397ba73e9
# Parent  38330bafd60f1c809e42a948e7aa8ed5830990bb
Bug 1256282 - [webext] Add test unit for the internal getAPILevelForWindow helper. r?kmag

MozReview-Commit-ID: HVoUAMOKqTZ

diff --git a/toolkit/components/extensions/test/mochitest/chrome.ini b/toolkit/components/extensions/test/mochitest/chrome.ini
--- a/toolkit/components/extensions/test/mochitest/chrome.ini
+++ b/toolkit/components/extensions/test/mochitest/chrome.ini
@@ -7,8 +7,9 @@ support-files =
   file_sample.html
 
 [test_chrome_ext_downloads_download.html]
 [test_chrome_ext_downloads_misc.html]
 skip-if = 1 # Currently causes too many intermittent failures.
 [test_chrome_ext_downloads_search.html]
 [test_chrome_ext_eventpage_warning.html]
 [test_chrome_ext_contentscript_unrecognizedprop_warning.html]
+[test_chrome_ext_getAPILevelForWindow.html]
\ No newline at end of file
diff --git a/toolkit/components/extensions/test/mochitest/test_chrome_ext_getAPILevelForWindow.html b/toolkit/components/extensions/test/mochitest/test_chrome_ext_getAPILevelForWindow.html
new file mode 100644
--- /dev/null
+++ b/toolkit/components/extensions/test/mochitest/test_chrome_ext_getAPILevelForWindow.html
@@ -0,0 +1,66 @@
+<!DOCTYPE HTML>
+<html>
+<head>
+  <title>Test for WebExtension EventPage Warning</title>
+  <script src="chrome://mochikit/content/tests/SimpleTest/SimpleTest.js"></script>
+  <script src="chrome://mochikit/content/tests/SimpleTest/SpawnTask.js"></script>
+  <script src="chrome://mochikit/content/tests/SimpleTest/ExtensionTestUtils.js"></script>
+  <script type="text/javascript" src="head.js"></script>
+  <link rel="stylesheet" href="chrome://mochikit/contents/tests/SimpleTest/test.css"/>
+</head>
+<body>
+
+<script type="text/javascript">
+"use strict";
+
+const Ci = Components.interfaces;
+Components.utils.import("resource://gre/modules/ExtensionManagement.jsm");
+Components.utils.import("resource://gre/modules/Services.jsm");
+
+function createWindowWithAddonId(addonId) {
+  let baseURI = Services.io.newURI("about:blank", null, null);
+  let originAttributes = {addonId};
+  let principal = Services.scriptSecurityManager
+                           .createCodebasePrincipal(baseURI, originAttributes);
+  let chromeNav = Services.appShell.createWindowlessBrowser(true);
+  let interfaceRequestor = chromeNav.QueryInterface(Ci.nsIInterfaceRequestor);
+  let docShell = interfaceRequestor.getInterface(Ci.nsIDocShell);
+  docShell.createAboutBlankContentViewer(principal);
+
+  return docShell.contentViewer.DOMDocument.defaultView;
+}
+
+add_task(function* test_eventpages() {
+  const {getAPILevelForWindow, getAddonIdForWindow} = ExtensionManagement;
+  const {NO_PRIVILEGES, FULL_PRIVILEGES} = ExtensionManagement.API_LEVELS;
+
+  let apiLevel;
+
+  let fakeAddonIdWindow = createWindowWithAddonId("fake_id");
+  is(getAddonIdForWindow(fakeAddonIdWindow),
+     "fake_id", "the window has the expected addonId");
+
+  apiLevel = getAPILevelForWindow(fakeAddonIdWindow, "fake_id");
+  is(apiLevel, FULL_PRIVILEGES, "apiLevel for the chrome window should be FULL_PRIVILEGES");
+
+  apiLevel = getAPILevelForWindow(fakeAddonIdWindow, "different_fake_id");
+  is(apiLevel, NO_PRIVILEGES, "apiLevel for the chrome window should be NO_PRIVILEGES");
+
+  fakeAddonIdWindow.close();
+
+  let emptyAddonIdWindow = createWindowWithAddonId("");
+  is(getAddonIdForWindow(emptyAddonIdWindow),
+     "", "the window has the expected addonId");
+
+  apiLevel = getAPILevelForWindow(emptyAddonIdWindow, "");
+  is(apiLevel, NO_PRIVILEGES, "apiLevel for the chrome window should be NO_PRIVILEGES");
+
+  apiLevel = getAPILevelForWindow(emptyAddonIdWindow, "different_fake_id");
+  is(apiLevel, NO_PRIVILEGES, "apiLevel for the chrome window should be NO_PRIVILEGES");
+
+  emptyAddonIdWindow.close();
+});
+</script>
+
+</body>
+</html>
