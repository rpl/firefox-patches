# HG changeset patch
# User Luca Greco <luca.greco@alcacoop.it>

Bug 1218364 - windowless browser windows should not crash on Troubleshoot (r=billm,jrmuizel)

---
 gfx/layers/client/ClientLayerManager.cpp           |  1 +
 gfx/tests/browser/browser.ini                      |  4 ++
 .../browser_windowless_troubleshoot_crash.js       | 43 ++++++++++++++++++++++
 gfx/tests/moz.build                                |  1 +
 toolkit/modules/Troubleshoot.jsm                   |  6 ++-
 5 files changed, 54 insertions(+), 1 deletion(-)
 create mode 100644 gfx/tests/browser/browser.ini
 create mode 100644 gfx/tests/browser/browser_windowless_troubleshoot_crash.js

diff --git a/gfx/layers/client/ClientLayerManager.cpp b/gfx/layers/client/ClientLayerManager.cpp
index 7000d88..dfd623a 100644
--- a/gfx/layers/client/ClientLayerManager.cpp
+++ b/gfx/layers/client/ClientLayerManager.cpp
@@ -755,16 +755,17 @@ ClientLayerManager::ClearLayer(Layer* aLayer)
     ClearLayer(child);
   }
 }
 
 void
 ClientLayerManager::GetBackendName(nsAString& aName)
 {
   switch (mForwarder->GetCompositorBackendType()) {
+    case LayersBackend::LAYERS_NONE: aName.AssignLiteral("None"); return;
     case LayersBackend::LAYERS_BASIC: aName.AssignLiteral("Basic"); return;
     case LayersBackend::LAYERS_OPENGL: aName.AssignLiteral("OpenGL"); return;
     case LayersBackend::LAYERS_D3D9: aName.AssignLiteral("Direct3D 9"); return;
     case LayersBackend::LAYERS_D3D11: {
 #ifdef XP_WIN
       if (gfxWindowsPlatform::GetPlatform()->IsWARP()) {
         aName.AssignLiteral("Direct3D 11 WARP");
       } else {
diff --git a/gfx/tests/browser/browser.ini b/gfx/tests/browser/browser.ini
new file mode 100644
index 0000000..0a1902f
--- /dev/null
+++ b/gfx/tests/browser/browser.ini
@@ -0,0 +1,4 @@
+[DEFAULT]
+support-files =
+
+[browser_windowless_troubleshoot_crash.js]
diff --git a/gfx/tests/browser/browser_windowless_troubleshoot_crash.js b/gfx/tests/browser/browser_windowless_troubleshoot_crash.js
new file mode 100644
index 0000000..78008a9
--- /dev/null
+++ b/gfx/tests/browser/browser_windowless_troubleshoot_crash.js
@@ -0,0 +1,43 @@
+let { Services } = Cu.import("resource://gre/modules/Services.jsm", {});
+
+add_task(function* test_windowlessBrowserTroubleshootCrash() {
+  let webNav = Services.appShell.createWindowlessBrowser(false);
+
+  let onLoaded = new Promise((resolve, reject) => {
+    let docShell = webNav.QueryInterface(Ci.nsIInterfaceRequestor)
+                         .getInterface(Ci.nsIDocShell);
+    let listener = {
+      observe(contentWindow, topic, data) {
+        let observedDocShell = contentWindow.QueryInterface(Ci.nsIInterfaceRequestor)
+                                            .getInterface(Ci.nsIWebNavigation)
+                                            .QueryInterface(Ci.nsIDocShellTreeItem)
+                                            .sameTypeRootTreeItem
+                                            .QueryInterface(Ci.nsIDocShell);
+          if (docShell === observedDocShell) {
+            Services.obs.removeObserver(listener, "content-document-global-created", false);
+            resolve();
+          }
+        }
+    }
+    Services.obs.addObserver(listener, "content-document-global-created", false);
+  });
+  webNav.loadURI("about:blank", 0, null, null, null);
+
+  yield onLoaded;
+
+  let winUtils = webNav.document.defaultView.
+                        QueryInterface(Ci.nsIInterfaceRequestor).
+                        getInterface(Ci.nsIDOMWindowUtils);
+  is(winUtils.layerManagerType, "None", "windowless browser's layerManagerType should be 'None'");
+
+  ok(true, "not crashed");
+
+  var Troubleshoot = Cu.import("resource://gre/modules/Troubleshoot.jsm", {}).Troubleshoot;
+  var data = yield new Promise((resolve, reject) => {
+    Troubleshoot.snapshot((data) => {
+      resolve(data);
+    });
+  });
+
+  ok(data.graphics.windowLayerManagerType !== "None", "windowless browser window should not set windowLayerManagerType to 'None'");
+});
diff --git a/gfx/tests/moz.build b/gfx/tests/moz.build
index b985130..696ca9a 100644
--- a/gfx/tests/moz.build
+++ b/gfx/tests/moz.build
@@ -1,8 +1,9 @@
 # -*- Mode: python; c-basic-offset: 4; indent-tabs-mode: nil; tab-width: 40 -*-
 # vim: set filetype=python:
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 XPCSHELL_TESTS_MANIFESTS += ['unit/xpcshell.ini']
 MOCHITEST_MANIFESTS += ['mochitest/mochitest.ini']
+BROWSER_CHROME_MANIFESTS += ['browser/browser.ini']
diff --git a/toolkit/modules/Troubleshoot.jsm b/toolkit/modules/Troubleshoot.jsm
index 159bc66..bf7f872 100644
--- a/toolkit/modules/Troubleshoot.jsm
+++ b/toolkit/modules/Troubleshoot.jsm
@@ -302,21 +302,25 @@ var dataProviders = {
       var gfxInfo = Cc["@mozilla.org/gfx/info;1"].getService(Ci.nsIGfxInfo);
     }
     catch (e) {}
 
     data.numTotalWindows = 0;
     data.numAcceleratedWindows = 0;
     let winEnumer = Services.ww.getWindowEnumerator();
     while (winEnumer.hasMoreElements()) {
-      data.numTotalWindows++;
       let winUtils = winEnumer.getNext().
                      QueryInterface(Ci.nsIInterfaceRequestor).
                      getInterface(Ci.nsIDOMWindowUtils);
       try {
+        // NOTE: windowless browser's windows should not be reported in the graphics troubleshoot report
+        if (winUtils.layerManagerType == "None") {
+          continue;
+        }
+        data.numTotalWindows++;
         data.windowLayerManagerType = winUtils.layerManagerType;
         data.windowLayerManagerRemote = winUtils.layerManagerRemote;
         data.supportsHardwareH264 = winUtils.supportsHardwareH264Decoding;
       }
       catch (e) {
         continue;
       }
       if (data.windowLayerManagerType != "Basic")

