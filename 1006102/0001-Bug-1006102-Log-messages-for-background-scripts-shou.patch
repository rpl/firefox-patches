# HG changeset patch
# User Luca Greco <luca.greco@alcacoop.it>

Bug 1006102 - Log messages for background scripts should appear in extension debugger

- add GetAddonId method to BasePrincipal which returns originAttributes.addonId
- tag addon Console API messages with a custom consoleID ("addon/ID"),
  which is how the Addon Console RDP Actor recognize the messages that have to be
  collected and shown in the Addon Console Panel
---
 devtools/shared/webconsole/utils.js |  6 ++++++
 dom/base/Console.cpp                | 19 +++++++++++++++++++
 dom/base/Console.h                  |  1 +
 dom/webidl/Console.webidl           |  1 +
 4 files changed, 27 insertions(+)

diff --git a/devtools/shared/webconsole/utils.js b/devtools/shared/webconsole/utils.js
index 45dc8be..c7d8be1 100644
--- a/devtools/shared/webconsole/utils.js
+++ b/devtools/shared/webconsole/utils.js
@@ -1030,16 +1030,22 @@ ConsoleAPIListener.prototype =
     messages = messages.filter(msg => {
       return this.isMessageRelevant(msg);
     });
 
     if (aIncludePrivate) {
       return messages;
     }
 
+    // If this.consoleID is defined, we're in an addon console. We need to filter
+    // messages errors related to the addon id.
+    if (this.consoleID) {
+      messages = messages.filter(msg => msg.consoleID == this.consoleID);
+    }
+
     return messages.filter((m) => !m.private);
   },
 
   /**
    * Destroy the console API listener.
    */
   destroy: function CAL_destroy()
   {
diff --git a/dom/base/Console.cpp b/dom/base/Console.cpp
index e1b35a9..e3a1ca9 100644
--- a/dom/base/Console.cpp
+++ b/dom/base/Console.cpp
@@ -151,16 +151,18 @@ public:
   } mIDType;
 
   uint64_t mOuterIDNumber;
   nsString mOuterIDString;
 
   uint64_t mInnerIDNumber;
   nsString mInnerIDString;
 
+  nsString mConsoleID;
+
   nsString mMethodString;
   nsTArray<JS::Heap<JS::Value>> mArguments;
 
   // Stack management is complicated, because we want to do it as
   // lazily as possible.  Therefore, we have the following behavior:
   // 1)  mTopStackFrame is initialized whenever we have any JS on the stack
   // 2)  mReifiedStack is initialized if we're created in a worker.
   // 3)  mStack is set (possibly to null if there is no JS on the stack) if
@@ -699,16 +701,32 @@ Console::Console(nsPIDOMWindow* aWindow)
 
     // Without outerwindow any console message coming from this object will not
     // shown in the devtools webconsole. But this should be fine because
     // probably we are shutting down, or the window is CCed/GCed.
     nsPIDOMWindow* outerWindow = mWindow->GetOuterWindow();
     if (outerWindow) {
       mOuterID = outerWindow->WindowID();
     }
+
+    // Customize the consoleID if the script object principal has
+    // an addonId.
+    nsCOMPtr<nsIScriptObjectPrincipal> sop = do_QueryInterface(mWindow);
+    if (sop) {
+      nsIPrincipal* principal = sop->GetPrincipal();
+      if (principal) {
+        PrincipalOriginAttributes poa = BasePrincipal::Cast(principal)->OriginAttributesRef();
+        if (!poa.mAddonId.IsEmpty()) {
+          nsAutoCString consoleId;
+          CopyUTF16toUTF8(poa.mAddonId, consoleId);
+          consoleId.Insert(NS_LITERAL_CSTRING("addon/"), 0);
+          CopyUTF8toUTF16(consoleId, mConsoleID);
+        }
+      }
+    }
   }
 
   if (NS_IsMainThread()) {
     nsCOMPtr<nsIObserverService> obs = mozilla::services::GetObserverService();
     if (obs) {
       obs->AddObserver(this, "inner-window-destroyed", false);
     }
   }
@@ -1191,16 +1209,17 @@ Console::ProcessCallData(ConsoleCallData* aData)
   AutoSafeJSContext cx;
   ClearException ce(cx);
   RootedDictionary<ConsoleEvent> event(cx);
 
   JSAutoCompartment ac(cx, aData->mGlobal);
 
   event.mID.Construct();
   event.mInnerID.Construct();
+  event.mConsoleID = mConsoleID;
 
   MOZ_ASSERT(aData->mIDType != ConsoleCallData::eUnknown);
   if (aData->mIDType == ConsoleCallData::eString) {
     event.mID.Value().SetAsString() = aData->mOuterIDString;
     event.mInnerID.Value().SetAsString() = aData->mInnerIDString;
   } else {
     MOZ_ASSERT(aData->mIDType == ConsoleCallData::eNumber);
     event.mID.Value().SetAsUnsignedLongLong() = aData->mOuterIDNumber;
diff --git a/dom/base/Console.h b/dom/base/Console.h
index 394278b..31efbd5 100644
--- a/dom/base/Console.h
+++ b/dom/base/Console.h
@@ -205,16 +205,17 @@ private:
   nsCOMPtr<nsIConsoleAPIStorage> mStorage;
   RefPtr<JSObjectHolder> mSandbox;
 
   nsDataHashtable<nsStringHashKey, DOMHighResTimeStamp> mTimerRegistry;
   nsDataHashtable<nsStringHashKey, uint32_t> mCounterRegistry;
 
   uint64_t mOuterID;
   uint64_t mInnerID;
+  nsString mConsoleID;
 
   friend class ConsoleCallData;
   friend class ConsoleRunnable;
   friend class ConsoleCallDataRunnable;
   friend class ConsoleProfileRunnable;
 };
 
 } // namespace dom
diff --git a/dom/webidl/Console.webidl b/dom/webidl/Console.webidl
index d872975..557b250 100644
--- a/dom/webidl/Console.webidl
+++ b/dom/webidl/Console.webidl
@@ -40,16 +40,17 @@ interface Console {
   [BinaryName="noopMethod"]
   void timelineEnd();
 };
 
 // This is used to propagate console events to the observers.
 dictionary ConsoleEvent {
   (unsigned long long or DOMString) ID;
   (unsigned long long or DOMString) innerID;
+  DOMString consoleID = "";
   DOMString level = "";
   DOMString filename = "";
   unsigned long lineNumber = 0;
   unsigned long columnNumber = 0;
   DOMString functionName = "";
   double timeStamp = 0;
   sequence<any> arguments;
 

